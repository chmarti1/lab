[back](documentation.md)

Version 3.06<br>
June 2019<br>
Chris Martin<br>

## <a name="ref:top"></a> Reference
- [Table of configuration parameters](#params)
- [LConfig data types](#types)
- [LConfig functions](#functions)
- [LConfig compiler constants](#constants)


## <a name="params"></a> Table of configuration parameters

These are the parameters recognized by LCONFIG.  The valid values list the values or classes of values that each parameter can legally be assigned.  The scope indicates where those values are applied.  Global scope parameters are always overwritten if they are repeated, but AI and AO parameters are written to which ever channel is active, and there may be many.

| Parameter   | Valid Values                            | Scope        | Description
|:------------|:---------------------------------------:|:------------:|:--|
| connection  | eth,usb,any                             | Global       | Starts configuration of a new device and specifies over what interface that device should be reached.
| serial      | integer                                 | Global       | Specifies a device by its serial number (ignored over eth when ip is also specified)
| name	| string					| Global		| Specifies a device y its name (or alias).
| ip          | XXX.XXX.XXX.XXX                         | Global       | Over an ETH connection, specifies the devices to configure, but over a USB connection, IP is used to set the devices IP address.
| gateway     | XXX.XXX.XXX.XXX                         | Global       | Used to set the T7's default TCP/IP gateway
| subnet      | XXX.XXX.XXX.XXX                         | Global       | Used to set the T7's TCP/IP subnet mask
| samplehz    | floating point                          | Global       | The sample rate per channel in Hz
| settleus    | floating point                          | Global       | The settling time per sample in microseconds. If less than 5, the T7 will choose automatically.
| nsample     | integer                                 | Global       | How many samples per channel should be included in each stream packet?
| aichannel   | integer [0-13]                          | Analog Input | The physical analog input channel number
| ainegative  | [0-13], 199, ground, differential       | Analog Input | The physical channel to use as the negative side of the measurement.  199 and ground both indicate a single-ended measurement.  The T7 requires that negative channels be the odd channel one greater than the even positive counterpart (e.g. 0+ 1- or 8+ 9-).  Specify differential to make that selection automatic.
| ailabel       | string                                              | Analog Input | This is a text label that can be used to identify the channel.
| aicalslope | float                                                                 | Analog Input | Used with `aicalzero` to form a linear calibration.
| aicalzero | float | Analog Input | calibrated value = (AICALSLOPE)*(voltage - AICALZERO)
| aicalunits | string | Analog Input | Used to name the calibrated nunits ("V" by default)
| airange     | float [.01, .1, 1., 10.]                | Analog Input  | The bipolar (+/-) voltage range for the measurement.  The T7 can accept four values.
| airesolution| integer 					| Analog Input | The resolution index to be used for the channel.  (See [Resolution Indexes](https://labjack.com/support/datasheets/t-series/ain#resolution))
| diostream | integer					| Global | A 16-bit mask of DIO channels (FIO/EIO only) to include in a data stream. (1=include, 0=exclude).  If `diostream` is 0, then no digital streaming is included.
| aochannel   | integer [0,1]                           | Analog Output | The physical analog output (DAC) channel to use for pseudo function generator output.
| aolabel | string | Analog Output | A string used to name the analog output channel.
| aosignal    | constant, sine, square, triangle, noise | Analog Output | The type of cyclic signal to generate
| aoamplitude | floating point                          | Analog Output | Voltage amplitude of the AC component of the signal (ignored for constant signal).
| aooffset    | floating point                          | Analog Output | Offset (DC) voltage to add to the oscillating (AC) signal.
| aoduty      | floating point [0-1]                    | Analog Output | The duty cycle of triangle and square waves. This skews the signal to spend more time on one part of the wave than the other.
| aofrequency | floating point                          | Analog Output | Specifies the rate the wave will repeat in Hz.
| trigchannel | integer [0-13]                          | Global        | The analog input to use for a software trigger.  This is NOT the physical channel, but the index of the ordered list of configured inputs.
| triglevel   | floating point [-10. - 10.]             | Global        | Software trigger threshold voltage.
| trigedge    | rising, falling, all                    | Global        | Software trigger edge type.
| trigpre     | non-negative integer [>=0]              | Global        | The "pretrigger" is the minimum number of samples per channel PRIOR to the triger event that will be included in the streamed data.
| effrequency | floating point                         | Global        | Specifies the CLOCK0 rollover frequency.
| efchannel  | integer [0-7]                           | Flexible IO   | The physical channel to use for a digital IO operation.
| eflabel | string | Flexible IO | A string used to name the EF channel.
| efsignal   | pwm, count, frequency, phase, quadrature | Flexible IO  | The EF signal/feature to use on this EF channel.
| efdirection | input, output                          | Flexible IO   | Is this channel an input or an output? (input is default)
| efedge     | rising, falling, all                    | Flexible IO   | Specifies the behavior of EF features that depend on edge direction (count, phase, PWM).
| efdebounce | none, fixed, reset, minimum             | Flexible IO   | The debounce filter to be used for a counter input.
| efusec     | floating point [>0]                     | Flexible IO   | A generic time parameter for configuring EF channels.
| efdegrees  | floating point                          | Flexible IO   | A generic phase parameter for configuring EF channels.
| efduty     | floating point [0-1]                    | Flexible IO   | Duty cycle for a PWM output.
| meta        | flt/float, int/integer, str/string, stop/end/none | Meta | Starts a meta parameter stanza.  Any unrecognized parameter name after this directive will be treated as a new meta parameter of the specified type.  If stop, end, or none is specified, the meta stanza is ended, and unrecognized parameters will cause errors again.
| flt:param   | floating point                          | Meta | Specifies a single floating point meta parameter.
| int:param   | integer                                 | Meta | Specifies a single integer parameter
| str:param   | string                                  | Meta | Specifies a single string parameter

[top](#ref:top)

## <a name="types"></a> LCONFIG data types

These are the data types provided by `lconfig.h`.

### lc_aiconf_t Struct

Holds data relevant to the configuration of a single analog input channel

| Member | Type | Description
|------|:---:|------
| channel  | `unsigned int` | The physical channel number
| nchannel | `unsigned int` | The physical number of the negative channel
| range    | `double`       | The bipolar range (.01, .1, 1, 10)
| resolution | `unsigned int` | The channel's resolution index
| calslope | `double` | The channel's calibration slope (m = slope * (v - zero))
| calzero | `double` | The channel's calibration zero
| label | `char [LCONF_MAX_STR]` | The channel's text label

### lc_aoconf_t Struct

A structure that holds data relevant to the configuration of a single analog output channel

| Member | Type | Valid for | Default | Description
|---|:---:|:---:|:---:|:---
|channel | `unsigned int` | all | - | Specifies the physical DAC channel
|signal | `enum` | all | - | Specifies the type of signal: `LC_AO_CONSTANT` (a DC signal with no AC), `LC_AO_SINE`, `LC_AO_SQUARE`, `LC_AO_TRIANGLE`, `LC_AO_NOISE` (a series of pseudo-random samples)
|amplitude | `double` | sine, square, triangle, noise | `LCONF_DEF_AO_AMP` | Specifies the amplitude (max-mean) of the AC signal component in volts
|offset | `double` | all | `LCONF_DEF_AO_OFF` | Specifies a DC offset to superimpose with the signal in volts
|frequency | `double` | all | - | Specifies the rate at which the signal should repeat in Hz.  Determines the lowest frequency content in a white noise signal.  Constant signals should always be specified with a large frequency.
|duty | `double` | square, triangle | 0.5 | For a square wave, `duty` indicates the fractional time spent at the high value.  For a triangle wave, `duty` indicates the fractional time spent rising.

### lc_efconf_t Struct

A structure that holds data relevant to the configuration of a single flexible I/O channel

| Member | Type | Valid for | Default | Description
|---|:---:|:---:|:---:|:---
|channel | `int` | all | - | Specifies the physical EF channel [0-7]
|direction | `enum` | all | `LC_EF_INPUT` | Specifies input/output direction: `LC_EF_INPUT`, `LC_EF_OUTPUT`
|signal | `enum` | all | - | Specifies the behavior for the channel: `LC_EF_NONE`, `LC_EF_PWM`, `LC_EF_COUNT`, `LC_EF_FREQUENCY`, `LC_EF_PHASE`, `LC_EF_QUADRATURE`
|edge | `enum` | pwm, phase, count | `LC_EF_RISING` | Specifies which edge should be interpreted by the channel: `LC_EF_RISING`, `LC_EF_FALLING`, `LC_EF_ALL`
|debounce | `enum` | count | `LC_EF_DEBOUNCE_NONE` | Specifies which debounce filter should be used by the interrupt counter: `LC_EF_DEBOUNCE_NONE`, `LC_EF_DEBOUNCE_FIXED`, `LC_EF_DEBOUNCE_RESTART`, `LC_EF_DEBOUNCE_MINIMUM`
|time  | `double` | count, pwm, frequency, phase | 0. | In microseconds, specifies the debounce duration for counters, indicates the measured period in PWM and frequency modes, and indicates the measured delay in phase mode.
|phase | `double` | pwm | 0. | In degrees, indicates the phase of a PWM output.  This can be useful for motor driver applications.
|duty | `double` | pwm | 0.5 | Indicates the duty cycle (measured or commanded) of a PWM signal.
|counts | `unsigned int` | count, pwm, phase, frequency | 0 | Indicates the status of a counter input, the measured period of a PWM or frequency input (in ticks), or the measured delay of a phase input (in ticks).

### lc_ringbuf_t Struct

This structure is responsible for managing the data stream behind the scenes.  This ring buffer struct is designed to allow data to stream continuously in chunks called "blocks."  These are nothing more than the size of the data blocks sent by `LJM_eReadStream()`, and LCONFIG always sets them to LCONF_SAMPLES_PER_READ samples per channel.

| Member | Subordinate | Type | Description 
|---|---|:---:|:---
|size_samples | | `unsigned int` | The total size of the buffer (NOT per channel)
|blocksize_samples | | `unsigned int` | The total size of each read/write block (NOT per channel)
|samples_per_read | | `unsigned int` | Samples per channel in each read/write block
|samples_read | | `unsigned int` | A record of the samples per channel read from the buffer by the application.
|samples_streamed | | `unsigned int` | A record of the samples per channel read into the buffer from the T7.
|channels | | `unsigned int` | The number of channels currently in the data stream.
|read | | `unsigned int` | The index in the data buffer to start reading.  When `read == write`, the buffer is empty.  When the buffer is emptied, `read` is forced to be equal to `size_samples`.
|write | | `unsigned int` | The index in the data buffer where new samples should be written.
|buffer | | `double *` | The starting address of the buffer.

### lc_meta_t Struct

A structure that defines a single meta parameter

| Member | Subordinate | Type | Description 
|---|---|:---:|:---
|param | | `char[LCONF_MAX_STR]` | The string name of the meta parameter
|value | | `union` | A union for containing the value as an integer, double, or string
| | svalue | `char[LCONF_MAX_STR]` | A string value
| | ivalue | `int` | An integer value
| | fvalue | `double` | A floating point value
|type | | `char` | A character indicating the meta type: `'f'` for float, `'i'` for int, or `'s'` for a string

### lc_comconf_t Struct

A structure that defines a digital communications interface.  Some of the members are only used for specific interfaces, so the "Valid for" column describes how.

| Member | Type | Valid for | Default | Description
|---|:---:|:---:|:---:|:---
|type | `enum` | - | `LC_COM_NONE` | Defines the channel signal type: `LC_COM_NONE`, `LC_COM_UART`, `LC_COM_1WIRE`, `LC_COM_SPI`, `LC_COM_I2C`, `LC_COM_SBUS`.
|label | `char[LCONF_MAX_STR]` | all | - | Label string for the channel
|rate | `double` | type-dependent | all | - | The data rate for the channel
|pin_in | `int` | UART | -1 | The physical DIO pin number for the input channel
|pin_out | `int` | UART | -1 | The physical DIO pin number for the output channel
|pin_clock | `int` | - | -1 | The physical DIP pin number for the clock signal
|options | `union` | all | - | A union of structs used for type-specific configuration


### lc_devconf_t Struct

This structure contains all of the information needed to configure a device.  This is the workhorse data type, and usually it is the only one that needs to be explicitly used in the host application.

| Member | Type | Valid values | Description
|---|:---:|:---:|---
|connection | `int` | `LJM_ctUSB`, `LJM_ctETH`, `LJM_ctANY` | Integer corresponding to the connection type.  The values are those recognized by LabJack's `LJM_Open` function.
|connection_act | `int` | -1, `LJM_ctUSB`, `LJM_ctETH` | The actual connection used (useful when ANY was specified).  -1 when the device is not open.
|device | `int` | `LJM_dtANY`, `LJM_dtT4`, `LJM_dtT7` | Specifies a type of device.
|device_act| `int` | -1, `LJM_T4`, `LJM_T7` | Specifies the type of devices actually opened.  -1 when no device is open.
|ip | `char[LCONF_MAX_STR]` | XXX.XXX.XXX.XXX | The T7's IP address.  Used to WRITE the IP address in USB mode, and used to find the device in ETH mode.
|gateway | `char[LCONF_MAX_STR]` | XXX.XXX.XXX.XXX | The default TCP/IP gateway.
|subnet | `char[LCONF_MAX_STR]` | XXX.XXX.XXX.XXX | The TCP/IP subnet mask.
|serial | `char[LCONF_MAX_STR]` | decimal characters | The device serial number. Used to find the device in USB mode and only if an IP address is not supplied in ETH mode.
|aich | `AICONF[LCONF_MAX_NAICH]` | - | An array of `AICONF` structs for configuring input channels.
|naich | `unsigned int` | - | The number of aich entries that have been configured
|diostream | `int` | - | A 16-bit mask for which of the EF/EIO channels should be streamed
|aoch | `AOCONF[LCONF_MAX_NAOCH]` | - | An array of `AOCONF` structs for configuring output channels
|naoch | `unsigned int` | - | The number of aoch entries that have been configured
|trigchannel |  `int` | -1 | The `aich` channel to test for a trigger event
|trigmem |  `unsigned int` | 0 | Memory used in the trigger test
|triglevel | `double` | 0. | The trigger threshold in volts
|trigedge | `enum{TRIG_RISING, TRIG_FALLING, TRIG_ALL}` | `TRIG_RISING` | Trigger edge type
|trigstate | `enum{TRIG_IDLE, TRIG_PRE, TRIG_ARMED, TRIG_ACTIVE}`, | `TRIG_IDLE` | Trigger operational state
|effrequency | `double` | -1 | The flexible digital input/output rollover frequency
|efch | `EFCONF[LCONF_MAX_NEFCH]` | - | An array of `EFCONF` structs for configuring flexible digital I/O channels
|nefch| `unsigned int` | - | The number of efch entries that have been configured
|handle | `int` | - | The device handle returned by the `LJM_Open` function
|samplehz | `double`| positive frequency | The sample rate in Hz. This value will be overwritten with the ACTUAL device sample rate once an acquisition process has begun.
|settleus | `double`| positive time | The multiplexer settling time for each sample in microseconds
|nsample | `unsigned int` | - | Number of samples to read per each stream read operation
|meta | `METACONF[LCONF_MAX_META]` | - | An array of meta configuration parameters
|RB | `RINGBUFFER` | - | The data stream's buffer

[top](#ref:top)

## <a name="functions"></a> The LCONFIG functions

| Function | Description
|:---:|:---
| [**Interacting with Configuration Files**](api.md#fun:config) ||
|load_config| Parses a configuration file and encodes the configuration on an array of DEVCONF structures
|write_config| Writes a configuration file based on the configuration of a DEVCONF struct
| [**Device Interaction**](api.md#fun:dev) ||
|open_config| Opens a connection to the device identified in a DEVCONF configuration struct.  The handle is remembered by the DEVCONF struct.
|close_config| Closes an open connection to the device handle in a DEVCONF configuration struct
|upload_config| Perform the appropriate read/write operations to implement the DEVCONF struct settings on the T7
|download_config| Populate a fresh DEVCONF structure to reflect a device's current settings.  Not all settings can be verified, so only some of the settings are faithfully represented.
| [**Configuration Diagnostics**](api.md#fun:diag) ||
|show_config| Calls download_config and automatically generates an item-by-item comparison of the T7's current settings and the settings contained in a DEVCONF structure.
|ndev_config | Returns the number of configured devices in a DEVCONF array
|nistream_config| Returns the number of configured input channels in a DEVCONF device structure.  This includes analog AND digital streaming.
|nostream_config| Returns the number of configured output channels in a DEVCONF device
|aichan_config| Returns the range of legal analog input channels on the actual device type (`device_act`)
|aochan_config| Returns the range of legal anaog output channels on the actual device type
|efchan_config| Returns the range of legal digital extended feature channels on the actual device type
|status_data_stream| Returns the number of samples streamed from the T7, to the application, and waiting in the buffer
|iscomplete_data_stream| Returns a 1 if the number of samples streamed into the buffer is greater than or equal to the NSAMPLE configuration parameter
|isempty_data_stream| Returns a 1 if the buffer has no samples ready to be read
| [**Data Collection**](api.md#fun:data) ||
|start_data_stream | Checks the available RAM, allocates the buffer, and starts the acquisition process
|service_data_stream | Collects new data from the T7, updates the buffer registers, tests for a trigger event, services the trigger state
|read_data_stream | Returns a pointer into the buffer with the next available data to be read
|stop_data_stream | Halts the T7's data acquisition process
|clean_data_stream| Frees the buffer memory
|init_file_stream | Writes a header to a data file
|write_file_stream | Calls read_data_stream and writes formatted data to a data file
|status_data_stream | Retrieves information on the data streaming process
|update_ef | Update all flexible I/O measurements and output parameters in the EFCONF structs
| [**Meta Configuration**](#fun:meta) ||
| get_meta_int, get_meta_flt, get_meta_str | Returns a meta parameter integer, floating point, or string value.  
| put_meta_int, put_meta_flt, put_meta_str | Write an integer, floating point, or a string value to a meta parameter.
| **Helper Functions** | **(Not needed by most users)** |
|clean_file_stream | Clean up after a file stream process; close the file and deallocate the buffer.  This is done automatically by `stop_file_stream`.
|str_lower | Modify a string to be all lower case
|airegisters | Returns the modbus registers relevant to configuring an analog input channel
|aoregisters | Returns the modbus registers relevant to configuring an analog output channel
|print_color | Used by the `show_config` function to print colored text to the terminal
|read_param | Used by the `load_config` function to strip the whitespace around parameter/value pairs
|init_config | Writes sensible defaults to a configuration struct

[top](#ref:top)

## <a name="constants"></a> Table of LCONFIG constants

These are the compiler constants provided by `lconfig.h`.

| Constant | Value | Description
|--------|:-----:|-------------|
| TWOPI  | 6.283185307179586 | 2*pi comes in handy for signal calculations
| LCONF_VERSION | 3.06 | The floating point version number
| LCONF_MAX_STR | 80  | The longest character string permitted when reading or writing values and parameters
| LCONF_MAX_NAME | 49 | LJM's maximum device name length
| LCONF_MAX_META | 32 | Maximum number of meta parameters
| LCONF_MAX_STCH | 15     | Maximum number of stream channels (both input and output  permitted in the DEVCONF struct
| LCONF_MAX_AOCH | 1      | Highest analog output channel number allowed
| LCONF_MAX_NAOCH | 2     | Maximum number of analog output channels allowed
| LCONF_MAX_AICH | 13     | Highest analog input channel number allowed
| LCONF_MAX_NAICH | 14    | Maximum number of analog input channels allowed
| LCONF_MAX_AIRES | 8     | Maximum resolution index allowed
| LCONF_MAX_AOBUFFER | 512 | Maximum analog output buffer for repeating functions
| LCONF_BACKLOG_THRESHOLD | 1024 | Raise a warning if LJM reports a stream backlog greater than this value
| LCONF_CLOCK_MHZ | 80.0 | The T7 clock frequency in MHz
| LCONF_SAMPLES_PER_READ | 64 | The default samples_per_read value in streaming operations
| LCONF_DEF_NSAMPLE | 64 | Default value for the `nsample` parameter; used when it is unspecified
| LCONF_DEF_AI_NCH | 199 | Default value for the `ainegative` parameter
| LCONF_DEF_AI_RANGE | 10. | Default value for the `airange` parameter
| LCONF_DEF_AI_RES | 0. | Default value for the `airesolution` parameter
| LCONF_DEF_AO_AMP | 1. | Default value for the `aoamplitude` parameter
| LCONF_DEF_AO_OFF | 2.5 | Default value for the `aooffset` parameter
| LCONF_DEF_AO_DUTY | 0.5 | Default value for the `aoduty` parameter
| LCONF_NOERR | 0 | Value returned on successful exit
| LCONF_ERROR | 1 | Value returned on unsuccessful exit

[top](#ref:top)
